openapi: 3.0.0
servers:
  - url: 'http://m0.internal.diabetes.watch'
info:
  description: >-
    Manage a cluster of processes varied by environment.  One process will
    be run against multiple environments, one process per environment.
    You can learn more abou [multienv](https://github.com/bewest/node-multienv)
  version: 0.0.1
  title: MultiEnv
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: bewest@gmail.com
  license:
    name: Affero GPL 3.0
tags:
  - name: cluster
    description: Manages processes by cluster.
  - name: proc
    description: Access to proc managed by cluster.
  - name: env
    description: Environment for a process.
paths:
  /cluster:
    get:
      tags:
        - cluster
      summary: Get list of managed clusters
      description: JSON description of all currently running processes.
      operationId: getClusterList
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proc'
        '400':
          description: Invalid status value
  '/cluster/{id}':
    get:
      tags:
        - proc
      summary: Running proc by id.
      description: Returns details of a process by `id`.
      operationId: getClusterById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proc'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      parameters: []
  /history:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: >-
        Returns description of all processes seen by `multienv`.  Useful to get
        info on processes that may have died and/or been deleted.
      operationId: getHistory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proc'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      parameters: []
  /environs:
    get:
      tags:
        - env
      summary: Get list of managed environments.
      description: JSON description of all managed environments.
      operationId: getClusterList
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proc'
  '/environs/{name}':
    post:
      tags:
        - store
        - env
      summary: Create new environment
      description: >-
        **POST** a json object to define a new environment.

        `/environs/:name` returns a json description of environment by `name`.

        This is the name of the environment file relative to `WORKER_ENV`, sans
        `.env`

        extension.

        Returns new environment variables as a json object.
      operationId: createEnvironment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
      parameters: []
    get:
      summary: ''
      description: >-
        /environs/:name returns a json description of environment by name. This
        is the name of the environment file relative to WORKER_ENV, sans .env
        extension.
      parameters: []
      operationId: ''
      responses:
        default:
          description: Default response
    delete:
      summary: Remove an environment by name.
      description: >-
        `/environs/:name` - Delete (and stop a running process for) an
        environment.

        This is the name of the environment file relative to `WORKER_ENV`, sans
        `.env`

        extension.
      parameters: []
      operationId: ''
      responses:
        default:
          description: Default response
    description: ''
  '/environs/{name}/env':
    get:
      tags:
        - proc 
      summary: Get environment variables as a json object.
      description: >-
        `/environs/:name/env`

        This is the `name` of the environment file relative to `WORKER_ENV`,
        sans

        `.env` extension.
      operationId: getEnvironment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      parameters: []
  '/environs/{name}/env/{field}':
    get:
      tags:
        - store
      summary: Get value of environment variable of `field`.
      description: >-
        `/environs/:name/env/:field` - retrieve value of a single environment
        variable.

        This is the `name` of the environment file relative to `WORKER_ENV`,
        sans

        `.env` extension.

        The `field` is the name of the single environment variable.
      operationId: getEnvironmentVariable
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proc'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
externalDocs:
  description: See AsyncAPI example
  url: 'https://mermade.github.io/shins/asyncapi.html'
components:
  schemas:
    Proc:
      type: object
      properties:
        id:
          type: integer
          format: int64
        state:
          type: string
        isDead:
          type: boolean
        custom_env:
          type: object


  links: {}
  callbacks: {}
security: []
