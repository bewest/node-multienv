
		# map
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

  # INTERNAL_PORT 
  # PORT
  upstream redirector { server <%= ENV['UPSTREAM_SUBREQUEST'] %>; }
  # upstream proxy { server backends.service.consul; }

  server {
    resolver <%= ENV['RESOLVER_IP'] %>;
    # server_name ~^(u-(?<cluster_user>.*)\.backends.*);
    server_name ~^((?<cluster_user>.*)\.backends.*);
    listen      *:<%= ENV['NGINX_PORT'] %>;

    location = /internal/validate_request {
      internal;
      proxy_set_header X-Origin-URI $request_uri;
      # proxy_pass  http://redirector/validate_request/$cluster_user/$http_host;
      proxy_pass  http://redirector/internal_consul/$cluster_user/$http_host;
      proxy_set_header Host "$cluster_user";
      auth_request_set $backend_port $upstream_http_x_worker_port;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_method GET;

    }

    location ~ @proxy/(.*?)/(.*) {
        internal;
        set $backend_port $1;
        set $backend_id $2;
        # rewrite ^@proxy/(.*)/([0-9]+)/ $request_uri break;
        # proxy_pass http://127.0.0.1:$backend_port$uri$is_args$args;
        proxy_pass http://127.0.0.1:$backend_port$request_uri;
    }

    location @app {
      set $backend_port $upstream_http_x_worker_port;
      set $tenant 'http://localhost:$backend_port';
      # proxy_pass  http://redirector/debug/$tenant$request_uri;
      # proxy_pass http://127.0.0.1:$backend_port$request_uri;
      # proxy_pass $tenant$request_uri;
      proxy_pass http://localhost:5001;
      # proxy_pass http://127.0.0.1:$backend_port;
    }


    location    / {
      auth_request /internal/validate_request;
      auth_request_set $backend_port $upstream_http_x_worker_port;
      # auth_request_set $tenant http://$cluster_user.backends.service.consul:$backend_port;
      auth_request_set $tenant $upstream_http_x_selected_backend;

      # set $backend_port '$upstream_http_x_worker_port';
      # set $tenant http://my-envs:$backend_port;
      # /debug/$backend_port/$upstream_http_x_worker_port$uri;
      #proxy_pass  http://127.0.0.1:3434/environs/$cluster_user/resolver$request_uri;
      # $request_uri;
      proxy_http_version 1.1;
      # proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      # proxy_set_header Host "backends.diabetes.watch";
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # proxy_set_header X-Forwarded-Proto $scheme;
      # proxy_set_header X-Forwarded-Port $server_port;
      proxy_set_header X-Request-Start $msec;
      proxy_set_header X-Origin-URI $request_uri;

      # proxy_method GET;
      # proxy_pass_request_body off;
      # proxy_set_header Content-Length "";

      # proxy_pass  http://redirector/internal_consul/$cluster_user/$http_host;
      # proxy_pass  http://redirector/debug/$tenant$backend_port$request_uri;
      # proxy_pass  http://my-envs:5001;
      # proxy_pass  http://my-envs:$backend_port$uri$is_args$args;
      # proxy_pass  http://my-envs:$backend_port$request_uri;
      # proxy_pass http://127.0.0.1:$backend_port$uri$is_args$args;
      # rewrite ^ @proxy/$backend_port/1/ last;
      # proxy_pass  http://127.0.0.1:$backend_port$request_uri;
      # proxy_pass  http://backends.service.consul:$backend_port$request_uri;
      proxy_pass $tenant$request_uri;

    }
  }
